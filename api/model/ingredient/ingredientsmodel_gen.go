// Code generated by goctl. DO NOT EDIT!

package ingredient

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ingredientsFieldNames          = builder.RawFieldNames(&Ingredients{}, true)
	ingredientsRows                = strings.Join(ingredientsFieldNames, ",")
	ingredientsRowsExpectAutoSet   = strings.Join(stringx.Remove(ingredientsFieldNames, "id", "create_time", "update_time", "create_at", "update_at"), ",")
	ingredientsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(ingredientsFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	ingredientsModel interface {
		Insert(ctx context.Context, data *Ingredients) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Ingredients, error)
		Update(ctx context.Context, data *Ingredients) error
		Delete(ctx context.Context, id int64) error
	}

	defaultIngredientsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Ingredients struct {
		Id   int64  `db:"id"`
		Name string `db:"name"`
	}
)

func newIngredientsModel(conn sqlx.SqlConn) *defaultIngredientsModel {
	return &defaultIngredientsModel{
		conn:  conn,
		table: `"public"."ingredients"`,
	}
}

func (m *defaultIngredientsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultIngredientsModel) FindOne(ctx context.Context, id int64) (*Ingredients, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", ingredientsRows, m.table)
	var resp Ingredients
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultIngredientsModel) Insert(ctx context.Context, data *Ingredients) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1)", m.table, ingredientsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name)
	return ret, err
}

func (m *defaultIngredientsModel) Update(ctx context.Context, data *Ingredients) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, ingredientsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name)
	return err
}

func (m *defaultIngredientsModel) tableName() string {
	return m.table
}
