// Code generated by goctl. DO NOT EDIT!

package stage

import (
	"api/model"
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stagesFieldNames          = builder.RawFieldNames(&Stages{}, true)
	stagesRows                = strings.Join(stagesFieldNames, ",")
	stagesRowsExpectAutoSet   = strings.Join(stringx.Remove(stagesFieldNames, "id", "create_time", "update_time", "create_at", "update_at"), ",")
	stagesRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(stagesFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	stagesModel interface {
		Insert(ctx context.Context, data *Stages) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Stages, error)
		FindOneByRecipeOrder(ctx context.Context, recipe int64, order int64) (*Stages, error)
		Update(ctx context.Context, data *Stages) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStagesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Stages struct {
		Recipe      int64          `db:"recipe"`
		Order       int64          `db:"order"`
		Description sql.NullString `db:"description"`
		Id          int64          `db:"id"`
	}
)

func newStagesModel(conn sqlx.SqlConn) *defaultStagesModel {
	return &defaultStagesModel{
		conn:  conn,
		table: `"public"."stages"`,
	}
}

func (m *defaultStagesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStagesModel) FindOne(ctx context.Context, id int64) (*Stages, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", stagesRows, m.table)
	var resp Stages
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStagesModel) FindOneByRecipeOrder(ctx context.Context, recipe int64, order int64) (*Stages, error) {
	var resp Stages
	query := fmt.Sprintf("select %s from %s where recipe = $1 and order = $2 limit 1", stagesRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, recipe, order)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStagesModel) Insert(ctx context.Context, data *Stages) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, stagesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Recipe, data.Order, data.Description)
	return ret, err
}

func (m *defaultStagesModel) Update(ctx context.Context, newData *Stages) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, stagesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Recipe, newData.Order, newData.Description)
	return err
}

func (m *defaultStagesModel) tableName() string {
	return m.table
}
