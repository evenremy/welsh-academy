// Code generated by goctl. DO NOT EDIT!

package recipe

import (
	"api/model"
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	recipesFieldNames          = builder.RawFieldNames(&Recipes{}, true)
	recipesRows                = strings.Join(recipesFieldNames, ",")
	recipesRowsExpectAutoSet   = strings.Join(stringx.Remove(recipesFieldNames, "id", "create_time", "update_time", "create_at", "update_at"), ",")
	recipesRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(recipesFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	recipesModel interface {
		Insert(ctx context.Context, data *Recipes) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Recipes, error)
		Update(ctx context.Context, data *Recipes) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRecipesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Recipes struct {
		Title       string         `db:"title"`
		Description sql.NullString `db:"description"`
		Owner       sql.NullInt64  `db:"owner"`
		Id          int64          `db:"id"`
	}
)

func newRecipesModel(conn sqlx.SqlConn) *defaultRecipesModel {
	return &defaultRecipesModel{
		conn:  conn,
		table: `"public"."recipes"`,
	}
}

func (m *defaultRecipesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRecipesModel) FindOne(ctx context.Context, id int64) (*Recipes, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", recipesRows, m.table)
	var resp Recipes
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRecipesModel) Insert(ctx context.Context, data *Recipes) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, recipesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Description, data.Owner)
	return ret, err
}

func (m *defaultRecipesModel) Update(ctx context.Context, data *Recipes) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, recipesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Title, data.Description, data.Owner)
	return err
}

func (m *defaultRecipesModel) tableName() string {
	return m.table
}
