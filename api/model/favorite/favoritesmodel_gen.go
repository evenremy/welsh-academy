// Code generated by goctl. DO NOT EDIT!

package favorite

import (
	"api/model"
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	favoritesFieldNames          = builder.RawFieldNames(&Favorites{}, true)
	favoritesRows                = strings.Join(favoritesFieldNames, ",")
	favoritesRowsExpectAutoSet   = strings.Join(stringx.Remove(favoritesFieldNames, "id", "create_time", "update_time", "create_at", "update_at"), ",")
	favoritesRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(favoritesFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	favoritesModel interface {
		Insert(ctx context.Context, data *Favorites) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Favorites, error)
		FindOneByUserRecipe(ctx context.Context, user int64, recipe int64) (*Favorites, error)
		Update(ctx context.Context, data *Favorites) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFavoritesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Favorites struct {
		User   int64 `db:"user"`
		Recipe int64 `db:"recipe"`
		Id     int64 `db:"id"`
	}
)

func newFavoritesModel(conn sqlx.SqlConn) *defaultFavoritesModel {
	return &defaultFavoritesModel{
		conn:  conn,
		table: `"public"."favorites"`,
	}
}

func (m *defaultFavoritesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFavoritesModel) FindOne(ctx context.Context, id int64) (*Favorites, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", favoritesRows, m.table)
	var resp Favorites
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFavoritesModel) FindOneByUserRecipe(ctx context.Context, user int64, recipe int64) (*Favorites, error) {
	var resp Favorites
	query := fmt.Sprintf("select %s from %s where user = $1 and recipe = $2 limit 1", favoritesRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, user, recipe)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFavoritesModel) Insert(ctx context.Context, data *Favorites) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2)", m.table, favoritesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.User, data.Recipe)
	return ret, err
}

func (m *defaultFavoritesModel) Update(ctx context.Context, newData *Favorites) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, favoritesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.User, newData.Recipe)
	return err
}

func (m *defaultFavoritesModel) tableName() string {
	return m.table
}
