syntax = "v1"

info(
	title: "Welsh Academy API"
	desc: "A backend API for cheddar experts"
	author: "RÃ©my EVEN"
	email: "evenremy@gmail.com"
	version: "v0.0.1"
)

// types for AllIngredients
type (
	AllIngredientsReply {
		IngredientList []IngrediendReply `json:"ingredientList"`
	}
)

// types for AddIngredient
type (
	AddIngredientReq {
		Name string `json:"name"`
	}

	IngrediendReply {
		Id   int64  `json:"id"`
		Name string `json:"name"`
	}
)

// types for GetAllRecipes
type (
	// A readable recipe (with ingredient names)
	LiteRecipe {
		Id    int64  `json:"id"`
		Title string `json:"title"`
	}

	IngredientNameWithQuantity {
		Name     string  `json:"name"`
		Quantity float32 `json:"quantity"`
		Unit     string  `json:"unit"`
	}

	Stage {
		Order       int32  `json:"order"`
		Description string `json:"description"`
	}

	RecipesReply {
		RecipeList []LiteRecipe `json:"recipeList"`
	}

	FullRecipeReply {
		Id             int64                        `path:"recipe_id"`
		Title          string                       `json:"title"`
		Description    string                       `json:"description"`
		IngredientList []IngredientNameWithQuantity `json:"ingredientList"`
		StageList      []Stage                      `json:"stageList"`
	}
)

// GetRecipe
type (
	RecipeReq {
		RecipeId int64 `path:"recipe_id"`
	}
)

// types for GetFilteredRecipes
type (
	IngredientConstraintsReq {
		WithIngredientIdList    []int64 `json:"withIngredientIdList"`
		WithoutIngredientIdList []int64 `json:"withoutIngredientIdList"`
	}
)

type (
	// Recipe for creation (without generated id)
	// Ingredients should exists or IngredientList should be empty
	AddRecipeReq {
		Title          string                       `json:"title"`
		Description    string                       `json:"description"`
		IngredientList []LinkIngredientWithQuantity `json:"ingredientList"`
		StageList      []Stage                      `json:"stageList"`
	}

	// LinkIngredientWithQuantity for linking existing ingredient to parent recipe
	LinkIngredientWithQuantity {
		IngredientId int64   `json:"ingredientId"`
		Quantity     float32 `json:"quantity"`
		Unit         string  `json:"unit"`
	}

	AddRecipeReply {
		Id    int64  `json:"id"`
		Title string `json:"title"`
	}
)

type (
	FavReq {
		UserId   int64 `json:"userId" path:"user_id"`
		RecipeId int64 `path:"recipe_id"`
	}
)

type (
	AddUserReq {
		Username string `json:"username"`
	}

	AddUserReply {
		UserId int64 `json:"userId"`
	}
)

service welsh-academy-api {
	@handler AllIngredients
	get /ingredients returns (AllIngredientsReply)
	
	@handler AddIngredients
	post /ingredient (AddIngredientReq) returns (IngrediendReply)
	
	@handler GetAllRecipes
	get /recipes returns (RecipesReply)
	
	@handler GetFilteredRecipes
	post /filtered_recipes (IngredientConstraintsReq) returns (RecipesReply)
	
	@handler GetRecipe
	get /recipe/:recipe_id (RecipeReq) returns (FullRecipeReply)
	
	@handler AddRecipe
	post /recipe (AddRecipeReq) returns (AddRecipeReply)
	
	@handler AddFavoriteRecipe
	post /favorite_recipe/:recipe_id (FavReq)
	
	@handler DeleteFavoriteRecipe
	delete /favorite_recipe/:recipe_id (FavReq)
	
	@handler GetFavoriteRecipes
	get /favorite_recipes/:user_id (FavReq) returns (RecipesReply)
	
	@handler AddUser
	post /user (AddUserReq) returns (AddUserReply)
	
	@handler GetFakeRecipe
	get /example_recipe returns (AddRecipeReq)
	
	@handler GetFakeIngredient
	get /example_ingredient returns (AddIngredientReq)
}